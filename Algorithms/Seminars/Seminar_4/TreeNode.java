package Seminar_4;

// Класс для представления узла дерева
public class TreeNode {
    int value; // Значение, которое хранит узел
    TreeNode left; // Ссылка на левый дочерний узел
    TreeNode right; // Ссылка на правый дочерний узел

    // Конструктор для создания нового узла с заданным значением
    public TreeNode(int value) {
        this.value = value; // Инициализируем значение узла
        this.left = null; // У нового узла еще нет левого дочернего узла
        this.right = null; // У нового узла еще нет правого дочернего узла
    }

    // Главный метод для демонстрации работы с деревом
    public static void main(String[] args) {
        // Создаем корневой узел дерева со значением 1
        TreeNode root = new TreeNode(1);

        // Добавляем дочерние узлы к корневому узлу
        root.left = new TreeNode(2); // Левый дочерний узел со значением 2
        root.right = new TreeNode(3); // Правый дочерний узел со значением 3

        // Для узла со значением 2 (левого дочернего узла корневого узла) также создаем
        // дочерние узлы
        root.left.left = new TreeNode(4); // Левый дочерний узел узла со значением 2
        root.left.right = new TreeNode(5); // Правый дочерний узел узла со значением 2

        // Для узла со значением 3 (правого дочернего узла корневого узла) также создаем
        // дочерние узлы
        root.right.left = new TreeNode(6); // Левый дочерний узел узла со значением 3
        root.right.right = new TreeNode(7); // Правый дочерний узел узла со значением 3

        // В этот момент у нас есть дерево следующей структуры:
        // 1
        // / \
        // 2 3
        // / \ / \
        // 4 5 6 7

        // Далее, можно продолжить добавление узлов для создания более полного и
        // богатого дерева.
    }
}
